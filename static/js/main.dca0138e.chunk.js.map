{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardList.js","Components/Searchbox.js","Components/Scroll.js","Components/ErrorBoundary.js","Container/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","src","id","alt","name","email","CardList","robots","cardcomponent","map","item","index","key","Searchbox","searchfield","searchchange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasEroor","error","info","this","setstate","Component","App","onSearchChange","event","setState","target","value","fetch","then","response","json","users","filterrobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"+KAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCLSC,EAXH,SAACC,GACZ,OACD,yBAAKC,UAAU,uDACb,yBAAKC,IAAG,+BAA0BF,EAAMG,GAAhC,YAA8CC,IAAI,WAC5D,6BACA,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCMKC,EAXA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACXC,EAAcD,EAAOE,KAAI,SAACC,EAAKC,GACpC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAOT,GAAIK,EAAOI,GAAOT,GAAIE,KAAMG,EAAOI,GAAOP,KAAMC,MAAOE,EAAOI,GAAON,WAE9F,OACC,6BACCG,EADD,MCEaK,EARC,SAAC,GAAgC,EAA/BC,YAAgC,IAAlBC,EAAiB,EAAjBA,aAChC,OACC,6BACA,2BAAOf,UAAU,mCAAmCgB,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCG1FI,EAPF,SAACpB,GACd,OACC,yBAAKqB,MAAO,CAACC,UAAW,SAASC,OAAO,kBAAmBC,OAAO,UACjExB,EAAMyB,WCgBOC,E,kDAlBd,WAAY1B,GAAO,IAAD,8BACjB,cAAMA,IACD2B,MAAM,CACVC,UAAS,GAHO,E,8DAMAC,EAAMC,GACvBC,KAAKC,SAAS,CACbJ,UAAS,M,+BAIT,OAAGG,KAAKJ,MAAMC,SACN,yDAEDG,KAAK/B,MAAMyB,a,GAhBOQ,aC+CbC,E,kDAxCd,aAAe,IAAD,8BACb,gBAMDC,eAAe,SAACC,GACf,EAAKC,SAAS,CAACtB,YAAYqB,EAAME,OAAOC,SANxC,EAAKZ,MAAM,CACEnB,OAAO,GACPO,YAAY,IAJZ,E,gEAWM,IAAD,OAClByB,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAG,EAAKP,SAAS,CAAC7B,OAAOoC,S,+BAK5B,IAAD,OACAC,EAAad,KAAKJ,MAAMnB,OAAOsC,QAAO,SAAAC,GAC9C,OAAOA,EAAM1C,KAAK2C,cAAcC,SAAS,EAAKtB,MAAMZ,YAAYiC,kBAC9D,OAA8B,IAA3BjB,KAAKJ,MAAMnB,OAAO0C,OACZ,uCAIX,yBAAKjD,UAAU,MACf,wBAAIA,UAAU,IAAd,eACA,kBAAC,EAAD,CAAWe,aAAce,KAAKI,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU3B,OAAQqC,W,GAjCDZ,aCAnBkB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACD,kBAAC,EAAD,OAECC,SAASC,eAAe,SPwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLiC,QAAQjC,MAAMA,EAAMkC,a","file":"static/js/main.dca0138e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card =(props)=>{\r\n\treturn(\r\n<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n  <img src={`https://robohash.org/${props.id}?200x200`} alt='robots' />\r\n<div>\r\n<h2>{props.name}</h2>\r\n<p>{props.email}</p>\r\n</div>\r\n  </div>\r\n\t\t);\r\n}\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n//import {robots} from './robots';\r\nconst CardList=({robots})=>{\r\nconst cardcomponent=robots.map((item,index)=>{\r\n\treturn <Card key={index} id={robots[index].id} name={robots[index].name} email={robots[index].email}/>;\r\n})\r\n\treturn(\r\n\t\t<div>\r\n\t {cardcomponent};\r\n\t </div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Searchbox=({searchfield , searchchange} )=>{\r\nreturn (\r\n\t<div>\r\n\t<input className='pa3 b3 b--green bg-lightest-blue' type='search' placeholder='search robots' onChange={searchchange}/>\r\n    </div>\r\n    );\r\n\r\n}\r\nexport default Searchbox;","import React from 'react';\r\nconst Scroll=(props)=>{\r\nreturn (\r\n\t<div style={{overflowY: 'scroll',border:'1px solid black', height:'500px'}}>\r\n\t{props.children}\r\n\t</div>\r\n\t);\r\n};\r\nexport default Scroll;","import React, {Component}  from 'react';\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\thasEroor:false\r\n\t\t}\r\n\t}\r\n\tcomponentDidCatch(error,info){\r\n\t\tthis.setstate({\r\n\t\t\thasEroor:true\r\n\t\t})\r\n}\t\r\n\t\trender(){\r\n\t\t\tif(this.state.hasEroor){\r\n\t\t\t\treturn <h1>OOOOOPs that is not good </h1>\r\n\t\t\t}\r\n\t\t\treturn this.props.children;\r\n\t\t}\r\n\t}\r\nexport default ErrorBoundary;","import React, {Component} from 'react';\r\nimport CardList from '../Components/CardList';\r\n//import {robots} from './robots';\r\nimport Searchbox from '../Components/Searchbox';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundary from '../Components/ErrorBoundary'; \r\n\r\nclass  App extends Component{\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state={\r\n               robots:[],\r\n               searchfield:''\r\n\t\t}\r\n\t}\r\n\tonSearchChange=(event) =>{\r\n\t\tthis.setState({searchfield:event.target.value})\r\n \r\n } \r\n componentDidMount(){\r\n \tfetch('https://jsonplaceholder.typicode.com/users')\r\n \t .then(response =>response.json())\r\n \t .then(users =>this.setState({robots:users}))\r\n }\r\n \r\n\r\n     \r\n\trender() {\r\n    const filterrobots=this.state.robots.filter(robot=>{\r\n \treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())});\r\n    if(this.state.robots.length===0)\r\n    {return  <h1>Loading</h1>\r\n    }\r\n    else{\r\n  \treturn (\r\n\t\t<div className='tc'>\r\n\t\t<h1 className=\"\">ROBOFRIENDS</h1>\r\n\t\t<Searchbox searchchange={this.onSearchChange} />\r\n\t\t<Scroll>\r\n\t\t<ErrorBoundary>\r\n\t\t<CardList robots={filterrobots}/>\r\n\t\t</ErrorBoundary>\r\n\t\t</Scroll>\r\n\t\t</div>\r\n\t\t);}\r\n\r\n\t}\r\n} \r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './Container/App';\n\nReactDOM.render(\n  <React.StrictMode>\n <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}